#define MAX 50000
struct HeapHead
{
    int* head;
    HeapHead* next;
    int size;
};//保存初始建堆结果的结构体
HeapHead* head = new HeapHead();
HeapHead* pointer = head;

int Partition(int R[], int m, int n)//分划函数
{
    int i = m;
    int j = n+1;
    int k = R[m];
    while(i<j)
    {
        i++;
        while (i<=n&&R[i]<=k) i++;
        j--;
        while (j>=m&&R[j]>k) j--;
        if(i<j) swap(R[i],R[j]);
    }
    swap(R[m],R[j]);
    return j;
}

void Restore(int R[], int root, int e)//堆重排函数
{
    int m = 0;
    int j = root;
    while(j <= e / 2)
    {
        if ((2 * j + 1 <= e) && (R[2 * j] < R[2 * j + 1]))
            m = 2 * j + 1;
        else m = 2 * j;
        if (R[m] > R[j])
        {
            swap(R[m], R[j]);
            j = m;
        }
        else return;
    }
}

void HeapSort(int R[], int m,int n)//堆排序函数
{
     int num = n- m + 1;
     int tmp[MAX] = {0};
     int j = 1;
    int x = m;
    while (x <= n)
    {
        tmp[j] = R[x];
        x++;
        j++;
    }//将待排序数组复制到tmp里，便于操作
    x = n / 2;
    while (x >= 1)
    {
        Restore(tmp, x, num);
        x--;
    }//初始建堆
    int *tmp1 = new int[MAX];
    x = 1;
    while(x<=num)
    {
        tmp1[x] =  tmp[x];
        x++;
    }//再把tmp复制到tmp1中
    HeapHead* tmp2 = new HeapHead();
    tmp2->head = tmp1;
    tmp2->size = num;
    pointer->next = tmp2;
    pointer = tmp2;
    pointer->next = nullptr;
    x = num;
    while (x >= 2)
    {
        swap(tmp[1], tmp[x]);
        Restore(tmp, 1, x - 1);
        x--;
    }
    j = 1;
    x = m;
    while (x <= n)
    {
        R[x] = tmp[j];
        x++;
        j++;
    }
    return;
}

int quickSort(int R[], int m, int n, int depth, int total)//快排函数
{
    depth++;
    int num = n - m+1;
    //深度小,插入排序，返回递归深度
    if (num <= threshold)
    {
        return depth;
    }
    //深度大，堆排序，返回递归深度
    if (depth >= (2 * log(total) / log(2)))
    {
        HeapSort(R, m, n);
        return depth;
    }
    int depth1 = 0;
    int depth2 = 0;
    if (m < n)
    {
        int j = Partition(R, m, n);
        depth1 = quickSort(R, m, j - 1, depth, total);
        depth2 = quickSort(R, j + 1, n, depth, total);
    }
    //进行普通快速排序，返回函数的递归深度，如果两个子函数的递归深度不同，则返回递归深度大的一个
    return depth1 >= depth2 ? depth1 : depth2;
}

void insertSort(int R[], int a, int b)//普通插入排序函数
{
    for (int j = a + 1; j <= b; j++)
    {
        int i = j - 1;
        int k = R[j];
        while (i >= a && R[i] > k)
        {
            R[i + 1] = R[i];
            i--;
        }
        R[i + 1] = k;
    }
}

void sort(int R[], int n)//改进的快排函数
{
    head->next = nullptr;
    int depth = quickSort(R, 1, n, 0, n);//待排序数组为R，排序范围是1到n，递归深度初始值为-1，待排序元素个数为n
    HeapHead* temp = head->next;
    printf("depth_limit:%d\n", depth - 1);
    while (temp)
    {
        printf("Heap:");
        int* temparr = temp->head;
        int k = temp->size;
        for (int i = 1; i <= k; i++)
            printf("%d ", temparr[i]);
        printf("\n");
        temp = temp->next;
    }//输出heap一行
    printf("Intermediate:");
    //打印插入排序执行前的数组元素
    for (int i = 1; i <= n; i++)
        printf("%d ", R[i]);
    printf("\n");
    insertSort(R, 1, n);//输出后再进行插入排序
    return;
}
